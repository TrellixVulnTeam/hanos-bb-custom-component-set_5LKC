"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* npm dependencies */
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = __importDefault(require("commander"));
const fs_extra_1 = require("fs-extra");
/* internal dependencies */
const checkUpdateAvailable_1 = require("./utils/checkUpdateAvailable");
/* process arguments */
commander_1.default
    .usage('[name]')
    .name('bb interactions generate')
    .parse(process.argv);
const { args } = commander_1.default;
if (args.length === 0) {
    commander_1.default.help();
}
const name = args[0];
/* generate file */
(() => __awaiter(void 0, void 0, void 0, function* () {
    yield checkUpdateAvailable_1.checkUpdateAvailableCLI();
    if (name.includes(' ')) {
        throw new Error(chalk_1.default.red(`\nName cannot contain spaces\n`));
    }
    if (yield fs_extra_1.pathExists(`src/cinteractions/${name}.js`)) {
        throw new Error(chalk_1.default.red(`\nInteraction ${name} already exists\n`));
    }
    const interaction = `
function ${name}({ event, argument }: { event: Event, argument: string }): string {
  // Logic
  return argument;
}
`;
    yield Promise.all([
        fs_extra_1.outputFile(`src/interactions/${name}.ts`, interaction.trim()),
        console.log(chalk_1.default.green('The interaction has been generated')),
    ]);
}))();
//# sourceMappingURL=bb-interactions-generate.js.map
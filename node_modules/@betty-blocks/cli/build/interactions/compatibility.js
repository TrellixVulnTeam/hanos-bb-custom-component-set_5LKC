"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts = __importStar(require("typescript"));
const path_1 = __importDefault(require("path"));
const case_1 = __importDefault(require("case"));
const allowedTypes = ['number', 'string', 'boolean', 'Page', 'Event', 'void'];
exports.default = (filename) => {
    if (!filename)
        throw new Error(`unable to determine interaction name from ${filename}`);
    const program = ts.createProgram([filename], {});
    const typeChecker = program.getTypeChecker();
    const sourceFile = program.getSourceFile(filename);
    if (!sourceFile)
        throw new Error('no source file');
    const interactionName = case_1.default.camel(path_1.default.basename(filename).replace(/.ts/, ''));
    const interaction = {};
    // Loop through the root AST nodes of the file
    ts.forEachChild(sourceFile, node => {
        if (ts.isFunctionDeclaration(node)) {
            // name
            const functionName = node.name ? node.name.text : '';
            if (functionName !== interactionName) {
                throw new RangeError('file contains multiple statements');
            }
            interaction.name = functionName;
            interaction.parameters = {};
            // return type
            const typeNode = node.type;
            if (!typeNode) {
                throw new Error(`You forgot to declare a type for ${interactionName}`);
            }
            const returnType = typeChecker.typeToString(typeChecker.getTypeFromTypeNode(typeNode));
            interaction.type = case_1.default.pascal(returnType);
            if (node.parameters.length > 1) {
                throw new Error(`Only one parameter is allowed for ${interactionName}`);
            }
            const [firstParameter] = node.parameters;
            if (firstParameter) {
                if (!firstParameter.type) {
                    throw new Error(`You forgot to add a type to the parameter "${firstParameter.name.getText()}" for ${interactionName}`);
                }
                const t = typeChecker.getTypeFromTypeNode(firstParameter.type);
                const parameters = JSON.parse(typeChecker
                    .typeToString(t)
                    .replace(/;(?!.*;)/g, '')
                    .replace(/;/g, ',')
                    .replace(/(\w+)/g, '"$1"'));
                Object.entries(parameters).forEach(([paramName, paramType]) => {
                    if (!allowedTypes.includes(paramType)) {
                        throw new TypeError(`unsupported type for: ${paramName}`);
                    }
                    parameters[paramName] = case_1.default.pascal(paramType);
                });
                interaction.parameters = parameters;
            }
            // function body
            const functionBody = node.getText(sourceFile);
            if (!functionBody) {
                throw new Error(`You forgot to add code to your interaction for ${interactionName}`);
            }
            interaction.function = ts.transpileModule(node.getText(), {}).outputText;
        }
    });
    if (!interaction.function) {
        throw new RangeError(`
    expected expression of the kind
      function ${interactionName}({ event, argument }: { event: Event, argument: ArgumentType }): ReturnType {
        // body
      }
    `);
    }
    return interaction;
};
//# sourceMappingURL=compatibility.js.map
"use strict";
/* npm dependencies */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_extra_1 = __importDefault(require("fs-extra"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const commander_1 = __importDefault(require("commander"));
/* internal dependencies */
const rootDir_1 = __importDefault(require("./utils/rootDir"));
const acquireCustomFunctionsProject_1 = __importDefault(require("./functions/acquireCustomFunctionsProject"));
/* process arguments */
commander_1.default.name('bb functions build').parse(process.argv);
/* execute command */
const workingDir = process.cwd();
const identifier = acquireCustomFunctionsProject_1.default(workingDir);
console.log(`Building ${identifier}.bettyblocks.com bundle (this can take a while) ...`);
new Promise((resolve) => {
    const packerDir = path_1.default.join(rootDir_1.default(), 'assets', 'functions', 'packer');
    const buildDir = path_1.default.join(os_1.default.tmpdir(), identifier);
    const sourceSrc = path_1.default.join(workingDir, 'src');
    const targetSrc = path_1.default.join(buildDir, 'src');
    const sourcePackage = path_1.default.join(workingDir, 'package.json');
    const targetPackage = path_1.default.join(buildDir, 'package.json');
    const sourceConfig = path_1.default.join(workingDir, 'webpack.config.js');
    const targetConfig = path_1.default.join(buildDir, 'webpack.config.js');
    if (!fs_extra_1.default.pathExistsSync(sourceConfig)) {
        fs_extra_1.default.copySync(path_1.default.join(packerDir, 'webpack.config.js'), sourceConfig);
    }
    fs_extra_1.default.emptyDir(buildDir, (err) => {
        if (err) {
            console.log(`${err.message}. Abort.`);
        }
        fs_extra_1.default.copySync(packerDir, buildDir);
        fs_extra_1.default.copySync(sourceSrc, targetSrc);
        fs_extra_1.default.copySync(sourceConfig, targetConfig);
        const sourceJson = fs_extra_1.default.readJsonSync(sourcePackage);
        const targetJson = fs_extra_1.default.readJsonSync(targetPackage);
        targetJson.dependencies = Object.assign(Object.assign({}, targetJson.dependencies), sourceJson.dependencies);
        fs_extra_1.default.writeFileSync(targetPackage, JSON.stringify(targetJson, null, 2));
        const build = child_process_1.spawn(`cd ${buildDir} && npm install && npm run build`, {
            shell: true,
        });
        build.stdout.pipe(process.stdout);
        build.stderr.pipe(process.stderr);
        build.on('close', resolve);
    });
})
    .then(() => {
    console.log('Done.');
})
    .catch((err) => {
    console.log(`${err}\nAbort.`);
    process.exit();
});
//# sourceMappingURL=bb-functions-build.js.map
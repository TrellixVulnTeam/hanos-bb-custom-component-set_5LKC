"use strict";
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = require("fs-extra");
const uploadBlob_1 = __importDefault(require("./utils/uploadBlob"));
const checkUpdateAvailable_1 = require("./utils/checkUpdateAvailable");
/* setup */
const { AZURE_BLOB_ACCOUNT, AZURE_BLOB_ACCOUNT_KEY } = process.env;
if (typeof AZURE_BLOB_ACCOUNT !== 'string') {
    throw new Error(chalk_1.default.red('\n$AZURE_BLOB_ACCOUNT is required\n'));
}
if (typeof AZURE_BLOB_ACCOUNT_KEY !== 'string') {
    throw new Error(chalk_1.default.red('\n$AZURE_BLOB_ACCOUNT_KEY is required\n'));
}
/* process arguments */
commander_1.default
    .usage('[options] [path]')
    .name('bb components publish')
    .option('-b, --bucket [name]', 'the component set name')
    .parse(process.argv);
const { args, bucket: name } = commander_1.default;
const distDir = args.length === 0 ? 'dist' : `${args[0]}/dist`;
if (!name || !name.length) {
    throw new Error(chalk_1.default.red('\n-b or --bucket [name] is required\n'));
}
/* execute command */
const read = (fileName) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return fs_extra_1.readJSON(`${distDir}/${fileName}`);
    }
    catch (error) {
        const { code, message } = error;
        throw new Error(chalk_1.default.red([
            'There was an error trying to publish your component set',
            code === 'ENOENT' ? message : error,
        ].join('\n')));
    }
});
const upload = (objects, fileName) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return uploadBlob_1.default(name, fileName, JSON.stringify(objects));
    }
    catch (error) {
        const defaultMessage = 'There was an error trying to publish your component set';
        const { body, message } = error;
        if (!body) {
            throw new Error(chalk_1.default.red([defaultMessage, message].join('\n')));
        }
        const { code, message: bodyMessage } = body;
        const extraMessage = code === 'AuthenticationFailed'
            ? 'Make sure your azure blob account and key are correct'
            : bodyMessage;
        throw new Error(chalk_1.default.red([defaultMessage, extraMessage].join('\n')));
    }
});
const publish = (fileName) => __awaiter(void 0, void 0, void 0, function* () {
    console.log(`Publishing ${fileName}.`);
    const objects = yield read(fileName);
    return upload(objects, fileName);
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    yield checkUpdateAvailable_1.checkUpdateAvailableCLI();
    const files = ['prefabs.json', 'templates.json', 'interactions.json'];
    if (fs_extra_1.pathExists(`${distDir}/pagePrefabs.json`)) {
        files.push('pagePrefabs.json');
    }
    const [{ url }] = yield Promise.all(files.map(publish));
    console.log(chalk_1.default.green(`Upload succesfully.\n
Use the following URL in the Page Builder to start working with your component set:\n
${url}`));
}))();
//# sourceMappingURL=bb-components-publish.js.map
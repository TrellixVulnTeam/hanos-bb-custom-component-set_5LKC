"use strict";
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const commander_1 = __importDefault(require("commander"));
/* internal dependencies */
const functionDefinitions_1 = require("./functions/functionDefinitions");
const validations_1 = require("./functions/validations");
const config_1 = __importDefault(require("./functions/config"));
/* process arguments */
commander_1.default
    .usage('[function-name]')
    .name('bb functions validate')
    .parse(process.argv);
const { args: [inputFunctionName], } = commander_1.default;
/* execute command */
const workingDir = process.cwd();
const baseFunctionsPath = path_1.default.join(workingDir, 'functions');
const config = new config_1.default();
const validateFunctionByName = (functionPath, validator) => __awaiter(void 0, void 0, void 0, function* () {
    const json = functionDefinitions_1.functionDefinition(functionPath);
    const { status, functionName: name, errors } = yield validations_1.validateFunction(json, validator);
    if (status === 'ok') {
        const mark = chalk_1.default.green(`âˆš`);
        console.log(`${mark} Validated: ${name}`);
    }
    else {
        const msg = chalk_1.default.red(`${errors}`);
        const mark = chalk_1.default.red(`x`);
        console.log(`${mark} Validated: ${name}\n\t${msg}`);
    }
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    const validator = yield validations_1.functionValidator(config);
    if (inputFunctionName) {
        const functionPath = path_1.default.join(baseFunctionsPath, inputFunctionName);
        if (functionDefinitions_1.isFunctionDefinition(functionPath)) {
            validateFunctionByName(functionPath, validator);
        }
        else {
            console.log(`${chalk_1.default.red(`x`)} Error: Function not found, missing ${functionDefinitions_1.functionDefinitionPath(functionPath)}.`);
        }
    }
    else {
        fs_extra_1.default.readdirSync(baseFunctionsPath).forEach(functionDir => {
            const functionPath = path_1.default.join(baseFunctionsPath, functionDir);
            if (functionDefinitions_1.isFunctionDefinition(functionPath)) {
                validateFunctionByName(functionPath, validator);
            }
        });
    }
}))();
//# sourceMappingURL=bb-functions-validate.js.map
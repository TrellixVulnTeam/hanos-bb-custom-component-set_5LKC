"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const ide_1 = __importDefault(require("../utils/ide"));
const configPath = () => path_1.default.join(process.cwd(), 'config.json');
const readConfig = () => {
    const cfgPath = configPath();
    if (fs_extra_1.default.pathExistsSync(cfgPath)) {
        return fs_extra_1.default.readJsonSync(cfgPath);
    }
    return {};
};
const defaultConfig = () => {
    return {
        schemaUrl: 'https://github.com',
        functionSchemaPath: '/bettyblocks/json-schema/raw/master/schemas/actions/function.json',
        cacheDir: '.tmp/',
        fusionAuthUrl: 'https://fusionauth{ZONEPOSTFIX}.betty.services',
        builderApiUrl: '{HOST}/api/builder',
        domain: 'bettyblocks.com',
    };
};
class Config {
    constructor() {
        this.config = Object.assign(Object.assign({}, defaultConfig()), readConfig());
    }
    get identifier() {
        if (!this._identifier) {
            this._identifier =
                this.config.identifier || path_1.default.basename(process.cwd()).split('.')[0];
        }
        return this._identifier;
    }
    get zone() {
        if (!this._zone) {
            this._zone =
                this.config.host ||
                    path_1.default.basename(process.cwd()).split('.')[1] ||
                    'production';
        }
        return this._zone;
    }
    get host() {
        if (!this._host) {
            this._host = this.config.host || this.defaultHost();
        }
        return this._host;
    }
    get fusionAuthUrl() {
        let postfix = '';
        if (this.zone === 'acceptance') {
            postfix = '-ca';
        }
        else if (this.zone === 'edge') {
            postfix = '-ce';
        }
        return this.config.fusionAuthUrl.replace('{ZONEPOSTFIX}', postfix);
    }
    get builderApiUrl() {
        return this.config.builderApiUrl.replace('{HOST}', this.host);
    }
    applicationId() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._applicationId) {
                const ide = new ide_1.default(this);
                yield ide.get(this.host);
                yield ide.webhead.get('/');
                const text = ide.webhead.text() || '';
                [, this._applicationId] =
                    text.match(/Betty\.application_id = '([0-9a-f]+)'/) || [];
            }
            return this._applicationId;
        });
    }
    get schemaUrl() {
        return this.config.schemaUrl;
    }
    get functionSchemaPath() {
        return this.config.functionSchemaPath;
    }
    defaultHost() {
        let subdomain = this.identifier;
        if (this.zone !== 'production') {
            subdomain = `${subdomain}.${this.zone}`;
        }
        return `https://${subdomain}.${this.config.domain}`;
    }
}
exports.default = Config;
//# sourceMappingURL=config.js.map
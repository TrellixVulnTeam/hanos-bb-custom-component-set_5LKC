"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
const jsonschema_1 = require("jsonschema");
const fetchRemoteSchema = (schemaUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield node_fetch_1.default(schemaUrl);
    const json = yield res.json();
    return json;
});
const importNextSchema = (validator, schemaId) => __awaiter(void 0, void 0, void 0, function* () {
    const schemaJSON = yield fetchRemoteSchema(schemaId);
    validator.addSchema(schemaJSON, schemaId);
    const nextSchemaId = validator.unresolvedRefs.shift();
    if (!nextSchemaId) {
        return validator;
    }
    return importNextSchema(validator, nextSchemaId);
});
const importSchema = (validator, config) => __awaiter(void 0, void 0, void 0, function* () {
    const functionSchemaUrl = config.schemaUrl + config.functionSchemaPath;
    return importNextSchema(validator, functionSchemaUrl);
});
const functionValidator = (config) => __awaiter(void 0, void 0, void 0, function* () {
    const validator = new jsonschema_1.Validator();
    return importSchema(validator, config);
});
exports.functionValidator = functionValidator;
const validateFunctionDefinition = (validator, functionDefinition) => {
    const functionSchemaId = Object.keys(validator.schemas).find(k => {
        return k.match(/function\.json$/);
    });
    if (!functionSchemaId) {
        throw new Error(`Cannot find Function schema Id, ${functionSchemaId}`);
    }
    const functionSchema = validator.schemas[functionSchemaId];
    return validator.validate(functionDefinition, functionSchema);
};
const validateFunction = (functionJson, validator) => __awaiter(void 0, void 0, void 0, function* () {
    const { errors } = validateFunctionDefinition(validator, functionJson);
    const func = functionJson;
    if (errors.length) {
        return {
            status: 'error',
            functionName: func.name,
            errors,
        };
    }
    return {
        status: 'ok',
        functionName: func.name,
        errors,
    };
});
exports.validateFunction = validateFunction;
//# sourceMappingURL=validations.js.map
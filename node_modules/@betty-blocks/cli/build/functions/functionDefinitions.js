"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const adm_zip_1 = __importDefault(require("adm-zip"));
/* @doc functionDefinitionPath
  Expands the function dir with `function.json`.
*/
const functionDefinitionPath = (functionPath) => path_1.default.join(functionPath, 'function.json');
exports.functionDefinitionPath = functionDefinitionPath;
/* @doc isFunctionDefinition
  Checks the given functions dir for a file named function.json.
  Returns true if the file exists.
*/
const isFunctionDefinition = (functionPath) => fs_extra_1.default.pathExistsSync(functionDefinitionPath(functionPath));
exports.isFunctionDefinition = isFunctionDefinition;
/* @doc functionDirs
  Returns a list of directories inside the given functionsDir that have a function.json.
*/
const functionDirs = (functionsDir) => fs_extra_1.default.readdirSync(functionsDir).reduce((dirs, functionDir) => {
    const functionPath = path_1.default.join(functionsDir, functionDir);
    if (isFunctionDefinition(functionPath)) {
        dirs.push(functionPath);
    }
    return dirs;
}, []);
exports.functionDirs = functionDirs;
/* @doc functionDefinition
  Reads the function.json from the given directory.
  Returns the parsed function.json as object.
*/
const functionDefinition = (functionPath) => {
    const filePath = functionDefinitionPath(functionPath);
    try {
        return fs_extra_1.default.readJSONSync(filePath);
    }
    catch (err) {
        throw new Error(`could not load json from ${filePath}: ${err}`);
    }
};
exports.functionDefinition = functionDefinition;
/* @doc functionDefinitions
  Returns an object containing all function.json definitions
  inside the given functionsDir, indexed by function name.
*/
const functionDefinitions = (functionsDir) => {
    return functionDirs(functionsDir).reduce((definitions, functionDir) => {
        const functionJson = functionDefinition(functionDir);
        return Object.assign({ [functionJson.name]: functionJson }, definitions);
    }, {});
};
exports.functionDefinitions = functionDefinitions;
const stringifyDefinitions = (definitions) => {
    const updatedDefinitions = Object.keys(definitions).reduce((acc, name) => {
        const definition = definitions[name];
        return Object.assign(Object.assign({}, acc), { [name]: Object.assign(Object.assign({}, definition), { options: JSON.stringify(definition.options) }) });
    }, {});
    return JSON.stringify(updatedDefinitions);
};
exports.stringifyDefinitions = stringifyDefinitions;
/* @doc newFunctionDefinition
  Creates a new folder for the given name and fills that folder with a function.json file
  and an index.js.
*/
const newFunctionDefinition = (functionsDir, functionName) => {
    const functionDefName = functionName.replace(/-./g, x => x.toUpperCase()[1]);
    const functionDir = path_1.default.join(functionsDir, functionName);
    try {
        fs_extra_1.default.mkdirpSync(functionDir);
        fs_extra_1.default.writeJSONSync(functionDefinitionPath(functionDir), {
            name: functionDefName,
            description: 'Description',
            label: functionName,
            category: 'Misc',
            icon: 'CreateIcon',
            options: [],
            yields: 'none',
        }, { spaces: 2 });
        fs_extra_1.default.writeFileSync(path_1.default.join(functionDir, 'index.js'), `const ${functionDefName} = async () => {\n\n}\n\nexport default ${functionDefName};`);
    }
    catch (err) {
        throw new Error(`could not initialize new function ${functionDir}: ${err}`);
    }
};
exports.newFunctionDefinition = newFunctionDefinition;
/* @doc zipFunctionDefinitions
  Takes functionsDir as path to a directory with function definitions.
  Scans each directory for a function.json file, and if present adds it
  to the zip file.
  Returns path to the zip file.
 */
const zipFunctionDefinitions = (functionsDir) => {
    const zip = new adm_zip_1.default();
    const tmpDir = '.tmp';
    const zipFilePath = `${tmpDir}/app.zip`;
    fs_extra_1.default.ensureDirSync(tmpDir);
    zip.addLocalFile(path_1.default.join(process.cwd(), 'package.json'));
    zip.addLocalFolder(functionsDir);
    zip.writeZip(zipFilePath);
    return zipFilePath;
};
exports.zipFunctionDefinitions = zipFunctionDefinitions;
//# sourceMappingURL=functionDefinitions.js.map
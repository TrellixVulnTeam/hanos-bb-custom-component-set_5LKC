"use strict";
/* eslint-disable camelcase */
/* eslint-disable @typescript-eslint/camelcase */
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ora_1 = __importDefault(require("ora"));
const path_1 = __importDefault(require("path"));
/* internal dependencies */
const ide_1 = __importDefault(require("../utils/ide"));
const functionDefinitions_1 = require("./functionDefinitions");
const config_1 = __importDefault(require("./config"));
/* execute command */
const workingDir = process.cwd();
const publishFunctions = (config) => __awaiter(void 0, void 0, void 0, function* () {
    const ide = new ide_1.default(config);
    yield ide.fusionAuth.ensureLogin();
    let spinner = ora_1.default(`Creating functions zip ...`).start();
    const functionsDir = path_1.default.join(workingDir, 'functions');
    const zipFile = functionDefinitions_1.zipFunctionDefinitions(functionsDir);
    spinner.succeed();
    const functions = functionDefinitions_1.functionDefinitions(functionsDir);
    const json = functionDefinitions_1.stringifyDefinitions(functions);
    spinner = ora_1.default(`Uploading functions ...`).start();
    const success = yield ide.fusionAuth.upload(config, zipFile, json);
    spinner[success ? 'succeed' : 'fail']();
});
const publishAppFunctions = () => {
    const config = new config_1.default();
    console.log(`Publishing to ${config.host} (${config.zone}) ...`);
    publishFunctions(config).then(() => {
        console.log('Done.');
    });
};
exports.default = publishAppFunctions;
//# sourceMappingURL=publishAppFunctions.js.map
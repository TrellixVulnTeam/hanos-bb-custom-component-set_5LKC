"use strict";
/* eslint-disable camelcase */
/* eslint-disable @typescript-eslint/camelcase */
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adm_zip_1 = __importDefault(require("adm-zip"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const ora_1 = __importDefault(require("ora"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
/* internal dependencies */
const ide_1 = __importDefault(require("./ide"));
const acquireAppFunctionsProject_1 = __importDefault(require("./acquireAppFunctionsProject"));
const publishFunctions_1 = require("./publishFunctions");
/* execute command */
const workingDir = process.cwd();
const domain = 'bettyblocks.com';
let identifier;
const groomMetaData = () => __awaiter(void 0, void 0, void 0, function* () {
    console.log('Grooming functions.json ...');
    const functionsJsonFile = path_1.default.join(workingDir, 'functions.json');
    const metaData = fs_extra_1.default.readJsonSync(functionsJsonFile);
    const appFunctions = [];
    fs_extra_1.default.readdirSync(workingDir).forEach(file => {
        if (file.match(/\.js$/)) {
            const name = file
                .replace(/\.js$/, '')
                .toLowerCase()
                .replace(/[^a-zA-Z0-9]+(.)/g, (match, chr) => chr.toUpperCase());
            appFunctions.push(name);
        }
    });
    const groomedMetaData = yield appFunctions.reduce((promise, name) => __awaiter(void 0, void 0, void 0, function* () {
        return promise.then((groomed) => __awaiter(void 0, void 0, void 0, function* () {
            // eslint-disable-next-line no-param-reassign
            groomed[name] = metaData[name];
            if (!groomed[name]) {
                // eslint-disable-next-line no-param-reassign
                groomed = yield publishFunctions_1.resolveMissingFunction(groomed, metaData, name);
            }
            return groomed;
        }));
    }), Promise.resolve({}));
    const json = `${JSON.stringify(groomedMetaData, null, 2)}\n`;
    fs_extra_1.default.writeFileSync(functionsJsonFile, json);
    return groomedMetaData;
});
const publishFunctions = (targetHost, targetZone, metaData) => __awaiter(void 0, void 0, void 0, function* () {
    const ide = new ide_1.default(targetHost, targetZone);
    yield publishFunctions_1.storeCustomFunctions(ide, metaData);
    const tmpDir = path_1.default.join(os_1.default.tmpdir(), identifier);
    const zipFile = `${tmpDir}/app.zip`;
    let spinner = ora_1.default(`Creating ${zipFile} ...`).start();
    fs_extra_1.default.ensureDirSync(tmpDir);
    const zip = new adm_zip_1.default();
    fs_extra_1.default.readdirSync(workingDir).forEach(file => zip.addLocalFile(file));
    zip.writeZip(zipFile);
    spinner.succeed();
    yield ide.webhead.get('/');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const text = ide.webhead.text() || '';
    const uuid = (text.match(/Betty\.application_id = '([0-9a-f]+)'/) || [])[1];
    yield ide.fusionAuth.ensureLogin();
    spinner = ora_1.default(`Uploading ${zipFile} ...`).start();
    const success = yield ide.fusionAuth.upload(uuid, zipFile);
    spinner[success ? 'succeed' : 'fail']();
});
const cleanMetaData = () => __awaiter(void 0, void 0, void 0, function* () {
    const functionsJsonFile = path_1.default.join(workingDir, 'functions.json');
    const metaData = fs_extra_1.default.readJsonSync(functionsJsonFile);
    Object.keys(metaData).forEach(name => {
        delete metaData[name].replace;
    });
    fs_extra_1.default.writeFileSync(functionsJsonFile, JSON.stringify(metaData, null, 2));
});
const publishAppFunctions = (host) => {
    identifier = acquireAppFunctionsProject_1.default(workingDir);
    const targetHost = host || `https://${identifier}.${domain}`;
    let targetZone = 'production';
    if (targetHost.match(`.acceptance.${domain}`)) {
        targetZone = 'acceptance';
    }
    else if (targetHost.match(`.edge.${domain}`)) {
        targetZone = 'edge';
    }
    console.log(`Publishing to ${targetHost} (${targetZone}) ...`);
    groomMetaData()
        .then((metaData) => publishFunctions(targetHost, targetZone, metaData))
        .then(cleanMetaData)
        .then(() => {
        console.log('Done.');
    })
        .catch((err) => {
        console.log(`${err}\nAbort.`);
        process.exit();
    });
};
exports.default = publishAppFunctions;
//# sourceMappingURL=publishAppFunctions.js.map
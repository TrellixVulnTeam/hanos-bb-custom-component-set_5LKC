"use strict";
/* eslint-disable no-param-reassign */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const ora_1 = __importDefault(require("ora"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const prompts_1 = __importDefault(require("prompts"));
const webhead_1 = __importDefault(require("webhead"));
const fusionAuth_1 = __importDefault(require("./fusionAuth"));
class IDE {
    constructor(config) {
        this.configFile = path_1.default.join(os_1.default.homedir(), '.bb-cli');
        this.config = config;
        if (!fs_extra_1.default.pathExistsSync(this.configFile)) {
            fs_extra_1.default.writeFileSync(this.configFile, JSON.stringify({ cookies: [] }, null, 2));
        }
        this.webhead = webhead_1.default({
            jarFile: this.configFile,
            beforeSend: ({ method, url, options }, { csrfToken }) => {
                if (method !== 'GET' && csrfToken) {
                    // eslint-disable-next-line no-unused-expressions
                    options.headers || (options.headers = {});
                    options.headers['X-Csrf-Token'] = csrfToken;
                }
                return { method, url, options };
            },
            complete: (_parameters, session, webhead) => {
                if (!session.csrfToken) {
                    const match = webhead.text().match(/Betty\.CSRF = '(.*?)'/);
                    if (match) {
                        const [, csrfToken] = match;
                        session.csrfToken = csrfToken;
                    }
                }
            },
        });
        this.fusionAuth = new fusionAuth_1.default(this.config, () => __awaiter(this, void 0, void 0, function* () { return this.relogin(); }));
    }
    get(requestPath, label) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('get', requestPath, undefined, label);
        });
    }
    post(requestPath, options, label) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('post', requestPath, options, label);
        });
    }
    put(requestPath, options, label) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('put', requestPath, options, label);
        });
    }
    request(method, requestPath, options, label) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureLogin();
            const spinner = label ? ora_1.default(label).start() : undefined;
            const { statusCode } = yield this.webhead[method](`${this.config.host}/api/${requestPath}`, options);
            if (spinner) {
                spinner[statusCode.toString().match(/^2/) ? 'succeed' : 'fail']();
            }
            return this.webhead.json() || this.webhead.text();
        });
    }
    relogin() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loggedIn = false;
            this.webhead.clearCookies();
            yield this.ensureLogin();
        });
    }
    ensureLogin() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.loggedIn)
                return;
            yield this.webhead.get(this.config.host);
            if (this.webhead.text().match('redirect_location')) {
                yield this.webhead.get('/login');
            }
            let email = '';
            let password = '';
            const ensureAuth = () => __awaiter(this, void 0, void 0, function* () {
                const cassieLogin = !!this.webhead.$('form [name="username"]').length;
                const fusionAuthLogin = !!this.webhead.$('form [name="loginId"]').length;
                if (cassieLogin || fusionAuthLogin) {
                    const config = fs_extra_1.default.readJsonSync(this.configFile);
                    const credentials = yield prompts_1.default([
                        {
                            type: 'text',
                            name: 'email',
                            message: 'Fill in your e-mail address',
                            initial: config.email,
                        },
                        {
                            type: 'password',
                            name: 'password',
                            message: 'Fill in your password',
                        },
                    ]);
                    email = credentials.email;
                    password = credentials.password;
                    config.email = email;
                    fs_extra_1.default.writeFileSync(this.configFile, JSON.stringify(config, null, 2));
                    const identifier = cassieLogin ? 'username' : 'loginId';
                    const input = {
                        [identifier]: email,
                        password,
                    };
                    yield this.webhead.submit('form', input);
                    yield ensureAuth();
                }
            });
            const ensure2FA = () => __awaiter(this, void 0, void 0, function* () {
                const cassie2FA = !!this.webhead.$('form[name="otp"]').length;
                const fusionAuth2FA = !!this.webhead.$('form[id="2fa-form"]').length;
                if (cassie2FA || fusionAuth2FA) {
                    const { code } = yield prompts_1.default([
                        {
                            type: 'text',
                            name: 'code',
                            message: 'Fill in your 2FA code',
                        },
                    ]);
                    const name = cassie2FA ? 'otp' : 'code';
                    const input = {
                        [name]: code,
                    };
                    yield this.webhead.submit('form[name="otp"],form[id="2fa-form"]', input);
                    yield ensure2FA();
                }
            });
            yield ensureAuth();
            yield ensure2FA();
            this.fusionAuth.loginId = email;
            this.fusionAuth.password = password;
            this.loggedIn = true;
        });
    }
}
exports.default = IDE;
//# sourceMappingURL=ide.js.map
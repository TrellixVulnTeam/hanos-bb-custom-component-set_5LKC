"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const prompts_1 = __importDefault(require("prompts"));
const webhead_1 = __importDefault(require("webhead"));
class FusionAuth {
    constructor(config, relogin) {
        this.configFile = path_1.default.join(os_1.default.homedir(), '.bb-cli-fa');
        this.config = config;
        this.relogin = relogin;
        this.webhead = webhead_1.default();
    }
    ensureLogin() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.get('/api/user', {
                headers: {
                    Authorization: `Bearer ${this.jwt()}`,
                },
            });
            if (!response || !response.user) {
                if (!this.loginId) {
                    yield this.relogin();
                }
                yield this.login();
            }
        });
    }
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            const { token, refreshToken, twoFactorId } = yield this.post('/api/login', {
                json: {
                    loginId: this.loginId,
                    password: this.password,
                },
            });
            if (token) {
                this.storeTokens(token, refreshToken);
            }
            else if (twoFactorId) {
                yield this.complete2FA(twoFactorId);
            }
        });
    }
    complete2FA(twoFactorId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { code } = yield prompts_1.default([
                {
                    type: 'text',
                    name: 'code',
                    message: 'Fill in your 2FA code (to upload code)',
                },
            ]);
            const { token, refreshToken } = yield this.post('/api/two-factor/login', {
                json: {
                    code,
                    twoFactorId,
                },
            });
            if (token) {
                this.storeTokens(token, refreshToken);
            }
            else {
                yield this.complete2FA(twoFactorId);
            }
        });
    }
    upload(config, zipFile, functionsJson) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureLogin();
            const applicationId = yield config.applicationId();
            const url = `${config.builderApiUrl}/artifacts/actions/${applicationId}/functions`;
            const { statusCode } = yield this.webhead.post(url, {
                headers: {
                    Authorization: `Bearer ${this.jwt()}`,
                },
                multiPartData: [
                    { name: 'file', file: zipFile },
                    { name: 'functions', contents: functionsJson },
                ],
            });
            return !!statusCode.toString().match(/^2/);
        });
    }
    get(urlPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('get', urlPath, options);
        });
    }
    post(urlPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('post', urlPath, options);
        });
    }
    request(method, urlPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.webhead.url) {
                yield this.webhead.get(this.config.fusionAuthUrl);
            }
            yield this.webhead[method](urlPath, options);
            return this.webhead.json() || this.webhead.text();
        });
    }
    storeTokens(jwt, refreshToken) {
        fs_extra_1.default.writeJsonSync(this.configFile, { jwt, refreshToken });
    }
    jwt() {
        let jwt;
        if (fs_extra_1.default.pathExistsSync(this.configFile)) {
            jwt = fs_extra_1.default.readJsonSync(this.configFile).jwt;
        }
        return jwt || null;
    }
}
exports.default = FusionAuth;
//# sourceMappingURL=fusionAuth.js.map
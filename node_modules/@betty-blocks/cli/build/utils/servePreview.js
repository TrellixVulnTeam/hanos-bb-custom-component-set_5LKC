"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const http_1 = require("http");
const path_1 = require("path");
const chalk_1 = __importDefault(require("chalk"));
const serve_handler_1 = __importDefault(require("serve-handler"));
const checkUpdateAvailable_1 = require("./checkUpdateAvailable");
const NODE_MODULES = process.mainModule.paths[1];
const relativePath = (path) => path_1.join(NODE_MODULES, path);
const BUILD_PATH_NPM = relativePath('./@betty-blocks/preview/build');
const BUILD_PATH_YARN = relativePath('../../preview/build');
const startServer = (path, port) => {
    checkUpdateAvailable_1.checkUpdateAvailablePreview(path);
    const server = http_1.createServer((response, request) => serve_handler_1.default(response, request, { public: path }));
    server.listen(port, () => {
        console.info(chalk_1.default.green(`Serving the preview at http://localhost:${port}`));
    });
};
exports.default = (port) => __awaiter(void 0, void 0, void 0, function* () {
    if (fs_1.existsSync(BUILD_PATH_NPM)) {
        startServer(BUILD_PATH_NPM, port);
    }
    else if (fs_1.existsSync(BUILD_PATH_YARN)) {
        startServer(BUILD_PATH_YARN, port);
    }
    else {
        console.error(chalk_1.default.red('\nCannot find the preview directory, please try again after upgrading the CLI to the latest version.\n'));
    }
});
//# sourceMappingURL=servePreview.js.map
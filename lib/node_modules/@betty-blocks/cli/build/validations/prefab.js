"use strict";
/* eslint-disable no-use-before-define */
// Array spread is done because of this issue: https://github.com/hapijs/joi/issues/1449#issuecomment-532576296
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const joi_1 = __importDefault(require("joi"));
const validation_1 = require("../utils/validation");
const constants_1 = require("./constants");
const action_1 = require("./prefab/action");
const component_1 = require("./prefab/component");
const interaction_1 = require("./prefab/interaction");
const variable_1 = require("./prefab/variable");
const schema = joi_1.default.object({
    name: joi_1.default.string().required(),
    keywords: joi_1.default.array(),
    icon: joi_1.default.string()
        .valid(...constants_1.ICONS)
        .required(),
    category: joi_1.default.string().required(),
    type: joi_1.default.string().valid('page'),
    description: joi_1.default.string(),
    detail: joi_1.default.string(),
    previewImage: joi_1.default.string(),
    previewUrl: joi_1.default.string(),
    interactions: joi_1.default.array()
        .items(interaction_1.interactionSchema)
        .max(constants_1.MAX_INTERACTIONS),
    actions: joi_1.default.array()
        .items(action_1.actionSchema)
        .max(constants_1.MAX_ACTIONS),
    variables: joi_1.default.array()
        .items(variable_1.variableSchema)
        .max(constants_1.MAX_VARIABLES),
    beforeCreate: joi_1.default.any(),
    structure: joi_1.default.array()
        .items(joi_1.default.custom(component_1.validateComponent))
        .required(),
});
const validate = (prefab) => {
    const { actions, variables } = prefab;
    const { error } = schema.validate(prefab);
    if (Array.isArray(actions)) {
        validation_1.findDuplicates(actions, 'action', { ref: 'id' });
    }
    if (Array.isArray(variables)) {
        validation_1.findDuplicates(variables, 'variable', 'name');
        validation_1.findDuplicates(variables, 'action', { ref: 'id' });
    }
    if (error) {
        throw new Error(chalk_1.default.red(`\nProperty: ${error.message} at prefab: ${prefab.name}\n`));
    }
};
exports.default = (prefabs) => {
    prefabs.forEach(validate);
    validation_1.findDuplicates(prefabs, 'prefab', 'name');
};
//# sourceMappingURL=prefab.js.map
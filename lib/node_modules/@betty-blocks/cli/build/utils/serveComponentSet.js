"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("http");
const https_1 = require("https");
const fs_1 = require("fs");
const serve_handler_1 = __importDefault(require("serve-handler"));
const checkUpdateAvailable_1 = require("./checkUpdateAvailable");
const serveComponentSet = (options) => {
    return new Promise((resolve, reject) => {
        const serverOptions = {};
        const createServer = options.ssl ? https_1.createServer : http_1.createServer;
        if (options.ssl) {
            if (!fs_1.existsSync(options.sslKey)) {
                throw new Error(`Private key '${options.sslKey}' does not exists.`);
            }
            if (!fs_1.existsSync(options.sslCert)) {
                throw new Error(`Certificate '${options.sslCert}' does not exists.`);
            }
            serverOptions.key = fs_1.readFileSync(options.sslKey);
            serverOptions.cert = fs_1.readFileSync(options.sslCert);
        }
        const listener = (response, request) => serve_handler_1.default(response, request, {
            public: `${options.rootDir}/dist`,
            headers: [
                {
                    source: '**/*.@(json)',
                    headers: [
                        {
                            key: 'Access-Control-Allow-Origin',
                            value: '*',
                        },
                        {
                            key: 'Cache-Control',
                            value: 'no-cache ',
                        },
                    ],
                },
            ],
        });
        createServer(serverOptions, listener)
            .on('error', error => reject(error.message))
            .listen(options.port, options.host, () => resolve());
    });
};
exports.default = (options) => __awaiter(void 0, void 0, void 0, function* () {
    yield checkUpdateAvailable_1.checkUpdateAvailableCLI();
    if (!fs_1.existsSync(`${options.rootDir}/dist`)) {
        throw new Error(`Directory '${options.rootDir}/dist' does not exists.`);
    }
    return serveComponentSet(options);
});
//# sourceMappingURL=serveComponentSet.js.map
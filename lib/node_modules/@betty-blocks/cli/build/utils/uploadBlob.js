"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const storage_blob_1 = require("@azure/storage-blob");
const { AZURE_BLOB_ACCOUNT, AZURE_BLOB_ACCOUNT_KEY } = process.env;
const getServiceUrl = () => {
    const sharedKeyCredential = new storage_blob_1.SharedKeyCredential(AZURE_BLOB_ACCOUNT, AZURE_BLOB_ACCOUNT_KEY);
    const pipeline = storage_blob_1.StorageURL.newPipeline(sharedKeyCredential);
    const url = `https://${AZURE_BLOB_ACCOUNT}.blob.core.windows.net`;
    return new storage_blob_1.ServiceURL(url, pipeline);
};
const setCorsRules = (serviceURL) => serviceURL.setProperties(storage_blob_1.Aborter.none, {
    cors: [
        {
            allowedOrigins: '*',
            allowedHeaders: '*',
            allowedMethods: 'GET',
            exposedHeaders: '*',
            maxAgeInSeconds: 86400,
        },
    ],
});
const getContainerURL = (serviceURL, blobContainerName) => storage_blob_1.ContainerURL.fromServiceURL(serviceURL, blobContainerName);
const getBlockURL = (url, name) => __awaiter(void 0, void 0, void 0, function* () {
    // Ensure there is a container, ignore 'ContainerAlreadyExists' errors on purpose
    try {
        yield url.create(storage_blob_1.Aborter.none, { access: 'blob' });
    }
    catch (error) {
        const { statusCode } = error;
        if (statusCode !== 409) {
            throw chalk_1.default.red(error);
        }
    }
    const blobURL = storage_blob_1.BlobURL.fromContainerURL(url, name);
    return storage_blob_1.BlockBlobURL.fromBlobURL(blobURL);
});
const upload = (url, content) => url.upload(storage_blob_1.Aborter.none, content, content.length, {
    blobHTTPHeaders: {
        blobCacheControl: 'private, max-age=0, no-transform',
        blobContentType: 'text/html',
    },
});
exports.default = (blobContainerName, blobName, blobContent) => __awaiter(void 0, void 0, void 0, function* () {
    const serviceURL = getServiceUrl();
    yield setCorsRules(serviceURL);
    const containerURL = getContainerURL(serviceURL, blobContainerName);
    const blockURL = yield getBlockURL(containerURL, blobName);
    const uploadResponse = yield upload(blockURL, blobContent);
    return Object.assign(Object.assign({}, uploadResponse), { url: containerURL.url });
});
//# sourceMappingURL=uploadBlob.js.map
"use strict";
/* npm dependencies */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const commander_1 = __importDefault(require("commander"));
/* internal dependencies */
const rootDir_1 = __importDefault(require("./utils/rootDir"));
/* process arguments */
commander_1.default
    .usage('[identifier]')
    .name('bb functions init')
    .option('-a, --app', 'Initialize an app functions project.')
    .parse(process.argv);
const initAppFunctions = commander_1.default.app;
const { args } = commander_1.default;
if (args.length !== 1) {
    console.log(chalk_1.default.red('Please provide the identifier (subdomain) of your application.'));
    process.exit();
}
/* execute command */
const identifier = args[0];
const workingDir = process.cwd();
const targetDir = path_1.default.join(workingDir, identifier);
fs_extra_1.default.access(targetDir, fs_extra_1.default.constants.F_OK, (err) => {
    if (err && err.code === 'ENOENT') {
        let type;
        let actions;
        let commands;
        let sourceDir;
        if (initAppFunctions) {
            type = 'app functions';
            actions = 'publish';
            commands = '';
            sourceDir = path_1.default.join(rootDir_1.default(), 'assets', 'app-functions', 'templates');
            fs_extra_1.default.copySync(sourceDir, targetDir);
        }
        else {
            type = 'functions';
            actions = 'build and/or publish';
            commands = 'bb functions build\n    ';
            sourceDir = path_1.default.join(rootDir_1.default(), 'assets', 'functions', 'templates');
            fs_extra_1.default.copySync(sourceDir, targetDir);
            fs_extra_1.default.copySync(path_1.default.join(rootDir_1.default(), 'assets', 'functions', 'packer', 'webpack.config.js'), path_1.default.join(targetDir, 'webpack.config.js'));
        }
        console.log(`Initialized ${type} project in ${targetDir}.
You can use "bb functions" to ${actions} it:

    cd ${identifier}
    ${commands}bb functions publish
`);
    }
    else {
        console.log(`The directory "${targetDir}" already exists. Abort.`);
    }
});
//# sourceMappingURL=bb-functions-init.js.map
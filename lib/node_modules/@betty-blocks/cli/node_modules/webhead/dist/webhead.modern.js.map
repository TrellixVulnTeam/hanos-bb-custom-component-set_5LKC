{"version":3,"file":"webhead.modern.js","sources":["../src/webhead.js"],"sourcesContent":["import cheerio from 'cheerio';\nimport FormData from 'form-data';\nimport fs from 'fs-extra';\nimport nodeFetch from 'node-fetch';\nimport param from 'jquery-param';\nimport toughCookie from 'tough-cookie';\n\nconst { CookieJar } = toughCookie;\n\nconst Webhead = (opts) => {\n  const { jarFile, userAgent, verbose, beforeSend, complete } = opts || {};\n\n  let webhead = {},\n    session = {},\n    cookieJar,\n    cachedCheerio,\n    cachedJSON,\n    request = async (method, url, options) => {\n      let parameters = {\n        method: method.toUpperCase(),\n        url: toURL(url),\n        options: toOptions(options),\n      };\n\n      if (beforeSend) {\n        parameters = beforeSend(parameters, session);\n        parameters.method = parameters.method.toUpperCase();\n        parameters.url = toURL(parameters.url);\n        parameters.options = toOptions(parameters.options);\n      }\n\n      const { response, redirect } = await fetch(parameters);\n\n      if (redirect) {\n        return request(redirect.method, redirect.url, redirect.options);\n      }\n\n      webhead.url = parameters.url;\n      webhead.cookie = getCookie(webhead.url.href);\n      webhead.response = response;\n\n      if (complete) {\n        complete(parameters, session, webhead);\n      }\n\n      return response;\n    },\n    toURL = (url) => {\n      if (url.constructor == URL) {\n        url = url.href;\n      }\n      return new URL(url, webhead.url);\n    },\n    toOptions = (object) => {\n      object || (object = {});\n      object.headers = toHeaders(object.headers);\n      return object;\n    },\n    toHeaders = (object) => {\n      if (object) {\n        return Object.entries(object).reduce((object, [key, value]) => {\n          if (key.toLowerCase() != 'set-cookie' && Array.isArray(value)) {\n            value = value.join('; ');\n          }\n          object[key.replace(/\\b./g, (c) => c.toUpperCase())] = value;\n          return object;\n        }, {});\n      } else {\n        return {};\n      }\n    },\n    fetch = async ({ method, url, options }) => {\n      let { headers, data, multiPartData, json } = options;\n\n      const cookie = getCookie(url.href),\n        opts = {\n          method,\n          headers: Object.assign({}, headers),\n          redirect: 'manual',\n        };\n\n      opts.headers['Host'] = url.host;\n      url = url.href;\n\n      if (cookie.length) {\n        opts.headers['Cookie'] = cookie;\n      }\n\n      if (!opts.headers['User-Agent'] && userAgent) {\n        opts.headers['User-Agent'] = userAgent;\n      }\n\n      if (data) {\n        if (method == 'GET') {\n          url += (url.match(/\\?/) ? '&' : '?') + param(data);\n        } else {\n          if (!opts.headers['Content-Type']) {\n            opts.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n          }\n          opts.body = param(data);\n        }\n      } else if (multiPartData) {\n        const form = new FormData();\n\n        (multiPartData || []).forEach((part) => {\n          if (part.file) {\n            form.append(part.name, fs.createReadStream(part.file));\n          } else {\n            form.append(\n              part.name,\n              part.hasOwnProperty('value') ? part.value : part.contents\n            );\n          }\n        });\n\n        opts.body = form;\n        opts.headers = {\n          ...opts.headers,\n          ...form.getHeaders(),\n        };\n      }\n\n      if (json) {\n        opts.headers['Content-Type'] = 'application/json';\n        opts.body = JSON.stringify(json);\n      }\n\n      verbose && console.log(method, url, opts);\n      let response = await nodeFetch(url, {\n        method,\n        ...opts,\n      });\n\n      return await handleResponse(method, url, options, response);\n    },\n    handleResponse = async (method, url, options, response) => {\n      const statusCode = response.status,\n        data = await response.text(),\n        headers = toHeaders(response.headers.raw());\n\n      verbose && console.log({ statusCode, data, headers });\n\n      if (headers['Set-Cookie']) {\n        const cookieUrl = toCookieUrl(url);\n\n        headers['Set-Cookie'].forEach((cookie) => {\n          cookieJar.setCookieSync(cookie, cookieUrl);\n        });\n\n        if (jarFile) {\n          const cookies = cookieJar.toJSON().cookies;\n          let json = {};\n\n          if (fs.pathExistsSync(jarFile)) {\n            json = fs.readJsonSync(jarFile);\n          }\n\n          if (json.constructor == Object) {\n            json.cookies = cookies;\n          } else {\n            json = cookies;\n          }\n\n          fs.writeFileSync(jarFile, JSON.stringify(json, null, 2));\n        }\n      }\n\n      let redirect;\n\n      if (/^3/.test('' + statusCode)) {\n        redirect = {\n          method,\n          url: headers['Location'],\n          options,\n        };\n        if (statusCode <= 303) {\n          redirect.method = 'GET';\n          delete redirect.options.data;\n        }\n      }\n\n      cachedCheerio = undefined;\n      cachedJSON = undefined;\n\n      return {\n        response: { statusCode, data, headers },\n        redirect,\n      };\n    },\n    toCookieUrl = (url) => {\n      return url.replace(/\\?.*/, '');\n    },\n    getCookie = (url) => {\n      return cookieJar.getCookiesSync(toCookieUrl(url)).join('; ');\n    };\n\n  `get post put patch delete head options`.split(' ').forEach((method) => {\n    webhead[method] = async (...parameters) =>\n      await request(method, ...parameters);\n  });\n\n  webhead.text = () => {\n    return webhead.response ? webhead.response.data : '';\n  };\n\n  webhead.json = () => {\n    if (!cachedJSON && webhead.response) {\n      const { data, headers } = webhead.response;\n      if (data && ('' + headers['Content-Type']).match('json')) {\n        cachedJSON = JSON.parse(data);\n      }\n    }\n    return cachedJSON;\n  };\n\n  webhead.$ = (...args) => {\n    if (!cachedCheerio && webhead.response) {\n      const { data, headers } = webhead.response;\n      const match = ('' + headers['Content-Type']).match(/(html|xml)/);\n      if (match) {\n        cachedCheerio = cheerio.load(data, { xmlMode: match[1] == 'xml' });\n      }\n    }\n    return cachedCheerio ? cachedCheerio(...args) : [];\n  };\n\n  webhead.submit = async (selector, data, options) => {\n    const form = webhead.$(selector);\n    if (form.length) {\n      const url = form.attr('action'),\n        method = form.attr('method') || 'GET';\n\n      data = Object.assign(\n        form.serializeArray().reduce((data, { name, value }) => {\n          data[name] = value;\n          return data;\n        }, {}),\n        data || {}\n      );\n\n      return await request(method, url, { ...options, data });\n    }\n  };\n\n  webhead.clearCookies = () => {\n    cookieJar.removeAllCookiesSync();\n  };\n\n  if (fs.pathExistsSync(jarFile)) {\n    const json = fs.readJsonSync(jarFile),\n      cookies = json.cookies || json;\n\n    cookieJar = CookieJar.fromJSON({\n      cookies: cookies.constructor == Array ? cookies : [],\n    });\n  } else {\n    cookieJar = new CookieJar();\n  }\n\n  return webhead;\n};\n\nexport default Webhead;\n"],"names":["CookieJar","toughCookie","opts","jarFile","userAgent","verbose","beforeSend","complete","cookieJar","cachedCheerio","cachedJSON","webhead","session","request","async","method","url","options","parameters","toUpperCase","toURL","toOptions","response","redirect","fetch","cookie","getCookie","href","constructor","URL","object","headers","toHeaders","Object","entries","reduce","key","value","toLowerCase","Array","isArray","join","replace","c","data","multiPartData","json","assign","host","length","match","param","body","form","FormData","forEach","part","append","name","file","fs","createReadStream","hasOwnProperty","contents","getHeaders","JSON","stringify","console","log","nodeFetch","handleResponse","statusCode","status","text","raw","cookieUrl","toCookieUrl","setCookieSync","cookies","toJSON","pathExistsSync","readJsonSync","writeFileSync","test","undefined","getCookiesSync","split","parse","$","args","cheerio","load","xmlMode","submit","selector","attr","serializeArray","clearCookies","removeAllCookiesSync","fromJSON"],"mappings":"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"}